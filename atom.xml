<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dissor.github.io</id>
    <title>物联指北</title>
    <updated>2021-05-14T09:02:00.223Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dissor.github.io"/>
    <link rel="self" href="https://dissor.github.io/atom.xml"/>
    <subtitle>记录嵌入式物联开发技术</subtitle>
    <logo>https://dissor.github.io/images/avatar.png</logo>
    <icon>https://dissor.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 物联指北</rights>
    <entry>
        <title type="html"><![CDATA[移植 LVGL 到 STM32 裸机设备]]></title>
        <id>https://dissor.github.io/yi-zhi-lvgl-dao-stm32-luo-ji-ping-tai/</id>
        <link href="https://dissor.github.io/yi-zhi-lvgl-dao-stm32-luo-ji-ping-tai/">
        </link>
        <updated>2021-05-14T08:44:52.000Z</updated>
        <content type="html"><![CDATA[<p><font color=#999AAA >提示：目录为自动生成</p>
</font>
<p><ul class="markdownIt-TOC">
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%80-lvgl-%E6%98%AF%E4%BB%80%E4%B9%88">一、LVGL 是什么？</a></li>
<li><a href="#%E4%BA%8C-%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">二、使用步骤</a>
<ul>
<li><a href="#1%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93">1.克隆仓库</a></li>
<li><a href="#2%E5%BB%BA%E7%AB%8B%E9%A1%B9%E7%9B%AE">2.建立项目</a></li>
<li><a href="#3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3.配置文件</a></li>
<li><a href="#4%E5%88%9D%E5%A7%8B%E5%8C%96-lvgl">4.初始化 lvgl</a></li>
<li><a href="#5%E6%98%BE%E7%A4%BA%E8%AE%BE%E5%A4%87%E6%8E%A5%E5%8F%A3">5.显示设备接口</a></li>
<li><a href="#6%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87%E6%8E%A5%E5%8F%A3">6.输入设备接口</a></li>
<li><a href="#7%E5%BF%83%E8%B7%B3">7.心跳</a></li>
<li><a href="#8%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86">8.任务处理</a></li>
<li><a href="#9%E6%8E%A7%E4%BB%B6%E5%85%B3%E8%81%94%E6%8C%89%E9%94%AE">9.控件关联按键</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</p>
<h1 id="前言">前言</h1>
<font color=#999AAA >
<p>本文介绍移植 LVGL 到 STM32 裸机设备，驱动小型 SPI 彩屏的基本方法和步骤。</p>
<p>当前使用 LVGL 版本为：v7.11.0</p>
<p>包括：克隆官方仓库、制作显示驱动、制作输入驱动、绘制图形界面、添加消息事件等。</p>
<p>需要工具：GIT</p>
<p>显示屏分辨率：128x160@16色深</p>
<p>官方网址：<a href="https://lvgl.io/">lvgl.io</a></p>
<p>官方文档：<a href="https://docs.lvgl.io/latest/en/html/index.html">docs.lvgl.io/latest/en/html/index.html</a></p>
<p>官网仓库：<a href="https://github.com/lvgl/lvgl">github.com/lvgl/lvgl</a></p>
</font>
<h1 id="一-lvgl-是什么">一、LVGL 是什么？</h1>
<font color=#999AAA >
<p>LVGL（Light and Versatile Graphics Library） 是一个开源图形库，以易于使用的图形元素，美观的视觉效果和低内存占用，提供了创建嵌入式 GUI 的一切。</p>
</font>
<h1 id="二-使用步骤">二、使用步骤</h1>
<h2 id="1克隆仓库">1.克隆仓库</h2>
<p><font color=#999AAA >代码如下：</p>
<pre><code class="language-c">git clone https://github.com/lvgl/lvgl.git
</code></pre>
<h2 id="2建立项目">2.建立项目</h2>
<font color=#999AAA >
<p>LVGL 文件夹位于工程项目下。</p>
<p>LVGL 包含 app、porting、src、driver 四个文件夹以及 lv_conf_template.h、lvgl.h 两个头文件。</p>
</font>
<p><font color=#999AAA >项目结构如下：</p>
<pre><code class="language-bash">LVGL
├── app
├── porting
├── src
├── driver
├── lv_conf_template.h
└── lvgl.h
</code></pre>
<font color=#999AAA >
<p>📁目录 app 存放自定义的应用程序，项目中主要修改该目录下的文件。</p>
<p>📁目录 porting 存放 lvgl 的输入输出设备驱动配置，创建项目或更换硬件时，进行修改。</p>
<p>📁目录 src 存放 lvgl 的官方图形库源码，不需要修改。</p>
<p>📁目录 driver 存放具体硬件的驱动文件，修改该目录文件时，可能需要配合修改 porting 目录文件。</p>
<p>📃文件 lv_conf_template.h 是 lvgl 图形库配置文件，必要时进行修改。</p>
<p>📃文件 lvgl.h 是 lvgl 图形库头文件，保持该位置结构，不需要修改。</p>
</font>
<p><font color=#999AAA >项目目录与仓库目录对应关系如下：</p>
<table>
<thead>
<tr>
<th>项目目录</th>
<th>仓库目录</th>
</tr>
</thead>
<tbody>
<tr>
<td>./app</td>
<td>自定义</td>
</tr>
<tr>
<td>./porting</td>
<td>./examples/porting</td>
</tr>
<tr>
<td>./src</td>
<td>./src</td>
</tr>
<tr>
<td>./driver</td>
<td>自定义</td>
</tr>
<tr>
<td>./lv_conf_template.h</td>
<td>./lv_conf_template.h</td>
</tr>
<tr>
<td>./lvgl.h</td>
<td>./lvgl.h</td>
</tr>
</tbody>
</table>
<h2 id="3配置文件">3.配置文件</h2>
<font color=#999AAA >
<p>LVGL 文件夹下 lv_conf_template.h 头文件以及 porting 目录下几个带有 _tempalte 标识的文件，需要打开文件，进行以下修改：</p>
<ol>
<li>将开头的 <strong>#if 0</strong> 更改为 <strong>#if 1</strong>。</li>
<li>将 porting 目录下几个带有 _tempalte.h 标识的头文件中的 <strong>#include &quot;lvgl/lvgl.h&quot;</strong> 改为 <strong>#include &quot;../lvgl.h&quot;</strong>。</li>
<li>修改 lv_conf_template.h 文件中一些重要配置：
<ul>
<li>LV_HOR_RES_MAX：显示器水平分辨率（#define LV_HOR_RES_MAX          (160)）</li>
<li>LV_VER_RES_MAX：显示器垂直分辨路（#define LV_VER_RES_MAX          (128)）</li>
<li>LV_COLOR_DEPTH：颜色深度（#define LV_COLOR_DEPTH     16）</li>
</ul>
</li>
</ol>
</font>
<h2 id="4初始化-lvgl">4.初始化 lvgl</h2>
<font color=#999AAA >
<p>初始化包含三个部分：</p>
<ol>
<li>图形库和接口驱动初始化。</li>
<li>调用图形库应用入口。</li>
<li>添加图形库任务回调和时基线程。</li>
</ol>
</font>
<p><font color=#999AAA >代码如下：</p>
<pre><code class="language-c">int main(int argc, char* argv[])
{
    ……
    
    // LVGL 图形库初始化
    lv_init();
    // 显示接口初始化
    lv_port_disp_init();
    // 输入接口初始化
    lv_port_indev_init();

    // 图形应用初始化
    lv_app_init();

    while(1) 
    {
        lv_task_handler();
        
        ……
    }
    
    return 0；
}

// 定时器回调函数（中断周期 1 毫秒）
void TIMx_IRQHandler(void)
{
    if(TIM_GetITStatus(TIMx,TIM_IT_Update) != RESET)
    {
        TIM_ClearITPendingBit(TIMx,TIM_FLAG_Update);
        ……
        // 图形库心跳时基 1 毫秒
        lv_tick_inc(1);
        ……
    }
}
</code></pre>
<h2 id="5显示设备接口">5.显示设备接口</h2>
<font color=#999AAA >
<p>显示设备接口设置，需要修改 lv_port_disp_template.c，主要包括两个结构体（lv_disp_buf_t、lv_disp_drv_t）和三个接口函数（lv_port_disp_init()、disp_init()、disp_flush()）。</p>
</font>
<p><font color=#999AAA >函数 lv_port_disp_init() 修改如下：</p>
<pre><code class="language-c">void lv_port_disp_init(void)

{
    // 初始化显示硬件驱动
    disp_init();

// 设置显示缓冲区
#define FB_BUFF_MODE 1

 // 动态单缓冲，占用内存最小   
#if (FB_BUFF_MODE == 1)
    static lv_disp_buf_t draw_buf_dsc;
    static lv_color_t draw_buf_1[LV_HOR_RES_MAX * 10];                        
    lv_disp_buf_init(&amp;draw_buf_dsc, draw_buf_1, NULL, LV_HOR_RES_MAX * 10); 
#endif

// 双缓冲，显示效果最佳，内存占用最大
#if (FB_BUFF_MODE == 2)
    static lv_disp_buf_t draw_buf_dsc;
    static lv_color_t draw_buf_2_1[LV_HOR_RES_MAX * LV_VER_RES_MAX];       
    static lv_color_t draw_buf_2_2[LV_HOR_RES_MAX * LV_VER_RES_MAX];          
    lv_disp_buf_init(&amp;draw_buf_dsc, draw_buf_2_1, draw_buf_2_2, LV_HOR_RES_MAX * LV_VER_RES_MAX); 
#endif

    // 显示驱动器的描述符
    lv_disp_drv_t disp_drv;      
    // 初始化显示驱动器
    lv_disp_drv_init(&amp;disp_drv); 

    // 设置分辨率
    disp_drv.hor_res = LV_HOR_RES_MAX;
    disp_drv.ver_res = LV_VER_RES_MAX;

    // 将缓冲区的内容复制到显示器
    disp_drv.flush_cb = disp_flush;

    // 设置显示缓冲区
    disp_drv.buffer = &amp;draw_buf_dsc;

    // 最后注册显示驱动
    lv_disp_drv_register(&amp;disp_drv);

}

</code></pre>
<p><font color=#999AAA >函数 disp_init() 修改如下：</p>
<pre><code class="language-c">// 初始化显示器和所需的外设
static void disp_init(void)
{
    // SPI 外设初始化
    lcd_spi_init();

    // 液晶屏初始化
	LCD_Init();
}
</code></pre>
<p><font color=#999AAA >函数 disp_flush() 修改如下：</p>
<pre><code class="language-c">// 将内部缓冲区的内容刷新到显示器的特定区域
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
    // 设置显示区域（开窗口）
    LCD_Address_Set(area-&gt;x1,area-&gt;y1,area-&gt;x2,area-&gt;y2);

    for(y = area-&gt;y1; y &lt;= area-&gt;y2; y++) {
        for(x = area-&gt;x1; x &lt;= area-&gt;x2; x++) {
            // 将所有的像素一一打印在屏幕上
            LCD_WR_DATA(*(uint16_t*)color_p);
            color_p++;
        }
    }

    // 通知图形库，已经准备好进行刷新（固有存在）
    lv_disp_flush_ready(disp_drv);
}
</code></pre>
<h2 id="6输入设备接口">6.输入设备接口</h2>
<font color=#999AAA >
<p>LVGL 输入设备需要选择键盘输入（Keypad），而不是按键输入（Button）。</p>
<p>显示设备接口设置，需要修改 lv_port_indev_template.c，主要包括两个结构体（lv_indev_t、lv_indev_drv_t）和三个接口函数（keypad_init()、keypad_read()、keypad_get_key()）。</p>
</font>
<p><font color=#999AAA >声明设备全局变量：</p>
<pre><code class="language-c">lv_indev_t * indev_keypad;
</code></pre>
<p><font color=#999AAA >函数 lv_port_indev_init() 修改如下：</p>
<pre><code class="language-c">void lv_port_indev_init(void)
{
    // 输入设备的描述符
    lv_indev_drv_t indev_drv;

    // 初始化键盘
    keypad_init();

    // 注册键盘
    lv_indev_drv_init(&amp;indev_drv);
    indev_drv.type = LV_INDEV_TYPE_KEYPAD;
    indev_drv.read_cb = keypad_read;
    indev_keypad = lv_indev_drv_register(&amp;indev_drv);
}
</code></pre>
<p><font color=#999AAA >函数 keypad_init() 修改如下：</p>
<pre><code class="language-c">// 初始化键盘和所需的外设
static void keypad_init(void)
{
    // 初始化键盘和所需的外设
}
</code></pre>
<p><font color=#999AAA >函数 lv_port_indev_init() 修改如下：</p>
<pre><code class="language-c">// 在键盘函数中搭配使用（目前无使用）
static void mouse_get_xy(lv_coord_t * x, lv_coord_t * y)
{
    (*x) = 0;
    (*y) = 0;
}
</code></pre>
<p><font color=#999AAA >函数 keypad_read() 修改如下：</p>
<pre><code class="language-c">// 将由库调取，以读取鼠标（需要包含上面的鼠标接口）
static bool keypad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{
    static uint32_t last_key = 0;

    // 获取鼠标坐标
    mouse_get_xy(&amp;data-&gt;point.x, &amp;data-&gt;point.y);

    // 获取键值
    uint32_t act_key = keypad_get_key();
    if(act_key != 0) {
        data-&gt;state = LV_INDEV_STATE_PR;

        last_key = act_key;
    } else {
        data-&gt;state = LV_INDEV_STATE_REL;
    }

    data-&gt;key = last_key;

    // 图形库要求返回 false（固有存在）
    return false;
}
</code></pre>
<p><font color=#999AAA >函数 keypad_get_key() 修改如下：</p>
<pre><code class="language-c">// 获取当前键值，无动作时，返回零值
static uint32_t keypad_get_key(void)
{
    // 自定义键值读取驱动
	uint32_t status;
	uint16_t value_tmp;
	
    // 获取键值，由定时器（或任务）调用按键扫描，实时刷新全局变量 KeyCtrl.EXKeyValue
	value_tmp = KeyCtrl.EXKeyValue;
    // 读取完成后，清除键值
	KeyCtrl.EXKeyValue = 0;

    // 键值与图形库事件进行映射
	switch (value_tmp)
    {
    	case 0x0008:
			status = LV_KEY_PREV;
    		break;

		case 0x0010:
			status = LV_KEY_NEXT;
    		break;
		
		case 0x0004:
			status = LV_KEY_LEFT;
    		break;
		
    	case 0x0020:
			status = LV_KEY_RIGHT;
    		break;
		
		case 0x0002:
			status = LV_KEY_ENTER;
    		break;
		case 0x0001:
			status = LV_KEY_ESC;
    		break;
    	default:
			status = 0;
    		break;
    }

    // 返回键值事件
    return status;
}
</code></pre>
<h2 id="7心跳">7.心跳</h2>
<p><font color=#999AAA >LVGL 需要提供系统时基，用于图形库获取动画事件和任务执行时间。</p>
<p><font color=#999AAA >LVGL 通过定时调用 lv_tick_inc(tick_period) 函数，并以毫秒为单位告知调用周期。</p>
<p><font color=#999AAA >在定时器中断中获取时基，代码如下：</p>
<pre><code class="language-c">// 定时器回调函数（中断周期 1 毫秒）
void TIMx_IRQHandler(void)
{
    if(TIM_GetITStatus(TIMx,TIM_IT_Update) != RESET)
    {
        TIM_ClearITPendingBit(TIMx,TIM_FLAG_Update);
        ……
        // 图形库心跳时基 1 毫秒
        lv_tick_inc(1);
        ……
    }
}
</code></pre>
<h2 id="8任务处理">8.任务处理</h2>
<p><font color=#999AAA >LVGL 通过不断调用 lv_task_handler() 函数，以处理图形库系统任务和事件，非严格计时。</p>
<p><font color=#999AAA >在主函数超级循环中调用，代码如下：</p>
<pre><code class="language-c">int main(int argc, char* argv[])
{
    ……

    while(1) 
    {
        lv_task_handler();
        
        ……
    }
    
    return 0；
}
</code></pre>
<h2 id="9控件关联按键">9.控件关联按键</h2>
<p><font color=#999AAA >LVGL 中使用键盘可以完全控制用户界面，需要将键盘控制的对象添加到组（Group）中，同一时间，只有一个焦点对象可以接收动作。</p>
<p>控件关联按键，步骤如下：</p>
<ol>
<li>使用 lv_group_t * group = lv_group_create() 创建组；</li>
<li>使用 lv_group_add_obj(group, obj) 将对象添加到组中；</li>
<li>使用 lv_indev_set_group(indev_keypad, group) 将输入设备分配给组，实现按键导航。</li>
</ol>
</font>
<p><font color=#999AAA >示例：为控件添加按键事件</p>
<pre><code class="language-c">static void user_login_open(void)
{
   // 创建组
   lv_group_t * group = lv_group_create();
   
   // 基于当前屏幕，生成简单对象控件
   lv_obj_t * obj = lv_obj_create(lv_scr_act(), NULL);
   // 设置对象控件的大小
   lv_obj_set_size(obj, 160, 30);
   // 设置对象控件的对齐方式
   lv_obj_align(obj, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
   // 设置对象控件的事件回调
   lv_obj_set_event_cb(obj, user_login_operate_event_cb);

   // 添加对象控件到组中
   lv_group_add_obj(group, obj);
   // 添加组到输入设备导航
   lv_indev_set_group(indev_keypad, group);
}
</code></pre>
<h1 id="总结">总结</h1>
<p><font color=#999AAA >以上的内容，简单介绍了如何移植 LVGL 到 STM32 裸机设备，而 LVGL 提供了大量能使我们快速便捷地开发图形界面的函数和方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[移植 LVGL 到嵌入式 Linux 设备]]></title>
        <id>https://dissor.github.io/yi-zhi-lvgl-dao-qian-ru-shi-linux-she-bei/</id>
        <link href="https://dissor.github.io/yi-zhi-lvgl-dao-qian-ru-shi-linux-she-bei/">
        </link>
        <updated>2021-05-14T02:53:23.000Z</updated>
        <content type="html"><![CDATA[<p><font color=#999AAA >提示：目录为自动生成</p>
</font>
<p><ul class="markdownIt-TOC">
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%80-lvgl-%E6%98%AF%E4%BB%80%E4%B9%88">一、LVGL 是什么？</a></li>
<li><a href="#%E4%BA%8C-%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">二、使用步骤</a>
<ul>
<li><a href="#1%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93">1.克隆仓库</a></li>
<li><a href="#2%E5%BB%BA%E7%AB%8B%E9%A1%B9%E7%9B%AE">2.建立项目</a></li>
<li><a href="#3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3.配置文件</a></li>
<li><a href="#4%E5%88%9D%E5%A7%8B%E5%8C%96-lvgl">4.初始化 lvgl</a></li>
<li><a href="#5%E6%98%BE%E7%A4%BA%E8%AE%BE%E5%A4%87%E6%8E%A5%E5%8F%A3">5.显示设备接口</a></li>
<li><a href="#6%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87%E6%8E%A5%E5%8F%A3">6.输入设备接口</a></li>
<li><a href="#7%E5%BF%83%E8%B7%B3">7.心跳</a></li>
<li><a href="#8%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86">8.任务处理</a></li>
<li><a href="#9%E6%8E%A7%E4%BB%B6%E5%85%B3%E8%81%94%E6%8C%89%E9%94%AE">9.控件关联按键</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</p>
<h1 id="前言">前言</h1>
<font color=#999AAA >
<p>本文介绍移植 LVGL 到嵌入式 Linux，驱动小型 SPI 彩屏的基本方法和步骤。</p>
<p>当前使用 LVGL 版本为：v7.11.0</p>
<p>包括：克隆官方仓库、制作显示驱动、制作输入驱动、绘制图形界面、添加消息事件等。</p>
<p>需要工具：GIT</p>
<p>显示屏分辨率：128x160@16色深</p>
<p>官方网址：<a href="https://lvgl.io/">lvgl.io</a></p>
<p>官方文档：<a href="https://docs.lvgl.io/latest/en/html/index.html">docs.lvgl.io/latest/en/html/index.html</a></p>
<p>官网仓库：<a href="https://github.com/lvgl/lvgl">github.com/lvgl/lvgl</a></p>
</font>
<h1 id="一-lvgl-是什么">一、LVGL 是什么？</h1>
<font color=#999AAA >
<p>LVGL（Light and Versatile Graphics Library） 是一个开源图形库，以易于使用的图形元素，美观的视觉效果和低内存占用，提供了创建嵌入式 GUI 的一切。</p>
</font>
<h1 id="二-使用步骤">二、使用步骤</h1>
<h2 id="1克隆仓库">1.克隆仓库</h2>
<p><font color=#999AAA >代码如下：</p>
<pre><code class="language-c">git clone https://github.com/lvgl/lvgl.git
</code></pre>
<h2 id="2建立项目">2.建立项目</h2>
<font color=#999AAA >
<p>LVGL 文件夹位于工程项目下。</p>
<p>LVGL 包含 app、porting、src、driver 四个文件夹以及 lv_conf_template.h、lvgl.h 两个头文件。</p>
</font>
<p><font color=#999AAA >项目结构如下：</p>
<pre><code class="language-bash">LVGL
├── app
├── porting
├── src
├── driver
├── lv_conf_template.h
└── lvgl.h
</code></pre>
<font color=#999AAA >
<p>📁目录 app 存放自定义的应用程序，项目中主要修改该目录下的文件。</p>
<p>📁目录 porting 存放 lvgl 的输入输出设备驱动配置，创建项目或更换硬件时，进行修改。</p>
<p>📁目录 src 存放 lvgl 的官方图形库源码，不需要修改。</p>
<p>📁目录 driver 存放具体硬件的驱动文件，修改该目录文件时，可能需要配合修改 porting 目录文件。</p>
<p>📃文件 lv_conf_template.h 是 lvgl 图形库配置文件，必要时进行修改。</p>
<p>📃文件 lvgl.h 是 lvgl 图形库头文件，保持该位置结构，不需要修改。</p>
</font>
<p><font color=#999AAA >项目目录与仓库目录对应关系如下：</p>
<table>
<thead>
<tr>
<th>项目目录</th>
<th>仓库目录</th>
</tr>
</thead>
<tbody>
<tr>
<td>./app</td>
<td>自定义</td>
</tr>
<tr>
<td>./porting</td>
<td>./examples/porting</td>
</tr>
<tr>
<td>./src</td>
<td>./src</td>
</tr>
<tr>
<td>./driver</td>
<td>自定义</td>
</tr>
<tr>
<td>./lv_conf_template.h</td>
<td>./lv_conf_template.h</td>
</tr>
<tr>
<td>./lvgl.h</td>
<td>./lvgl.h</td>
</tr>
</tbody>
</table>
<h2 id="3配置文件">3.配置文件</h2>
<font color=#999AAA >
<p>LVGL 文件夹下 lv_conf_template.h 头文件以及 porting 目录下几个带有 _tempalte 标识的文件，需要打开文件，进行以下修改：</p>
<ol>
<li>将开头的 <strong>#if 0</strong> 更改为 <strong>#if 1</strong>。</li>
<li>将 porting 目录下几个带有 _tempalte.h 标识的头文件中的 <strong>#include &quot;lvgl/lvgl.h&quot;</strong> 改为 <strong>#include &quot;../lvgl.h&quot;</strong>。</li>
<li>修改 lv_conf_template.h 文件中一些重要配置：
<ul>
<li>LV_HOR_RES_MAX：显示器水平分辨率（#define LV_HOR_RES_MAX          (160)）</li>
<li>LV_VER_RES_MAX：显示器垂直分辨路（#define LV_VER_RES_MAX          (128)）</li>
<li>LV_COLOR_DEPTH：颜色深度（#define LV_COLOR_DEPTH     16）</li>
</ul>
</li>
</ol>
</font>
<h2 id="4初始化-lvgl">4.初始化 lvgl</h2>
<font color=#999AAA >
<p>初始化包含三个部分：</p>
<ol>
<li>图形库和接口驱动初始化。</li>
<li>调用图形库应用入口。</li>
<li>添加图形库任务回调和时基线程。</li>
</ol>
</font>
<p><font color=#999AAA >代码如下：</p>
<pre><code class="language-c">int main(int argc, char* argv[])
{
    pthread_t id1,id_tick,id_ide;
    int ret;
    
    // LVGL 图形库初始化
    lv_init();
    // 显示接口初始化
    lv_port_disp_init();
    // 输入接口初始化
    lv_port_indev_init();

    // 图形应用初始化
    lv_app_init();

    // 图形库任务线程，用于图形库处理任务和事件
    ret = pthread_create(&amp;id_task,NULL,(void*)thread_lv_task_entry,NULL);
    if(ret != 0)
    {
        printf(&quot;Create lv_task pthread error\n&quot;);
        exit(1);
    }

    // 图形库时基线程，用于为图形库提供时基
    ret = pthread_create(&amp;id_tick,NULL,(void*)thread_lv_tick_entry,NULL);
    if(ret != 0)
    {
        printf(&quot;Create lv_tick pthread error\n&quot;);
        exit(1);
    }

    pthread_join(id_task,NULL);
    pthread_join(id_tick,NULL);

    exit(0);
}

// 时基线程
int thread_lv_tick_entry(void)
{
    while(1) 
    {
        lv_task_handler();
        usleep(1000);     /* takes microseconds */
        lv_tick_inc(1); 
    }
    return 0;
}

// 任务线程
int thread_lv_task_entry(void)
{
    while(1) 
    {
        lv_task_handler();
        usleep(5*1000);     /* takes microseconds */
    }
    return 0;
}
</code></pre>
<h2 id="5显示设备接口">5.显示设备接口</h2>
<font color=#999AAA >
<p>显示设备接口设置，需要修改 lv_port_disp_template.c，主要包括两个结构体（lv_disp_buf_t、lv_disp_drv_t）和三个接口函数（lv_port_disp_init()、disp_init()、disp_flush()）。</p>
</font>
<p><font color=#999AAA >函数 lv_port_disp_init() 修改如下：</p>
<pre><code class="language-c">void lv_port_disp_init(void)

{
    // 初始化显示硬件驱动
    disp_init();

// 设置显示缓冲区
#define FB_BUFF_MODE 1

 // 动态单缓冲，占用内存最小   
#if (FB_BUFF_MODE == 1)
    static lv_disp_buf_t draw_buf_dsc;
    static lv_color_t draw_buf_1[LV_HOR_RES_MAX * 10];                        
    lv_disp_buf_init(&amp;draw_buf_dsc, draw_buf_1, NULL, LV_HOR_RES_MAX * 10); 
#endif

// 双缓冲，显示效果最佳，内存占用最大
#if (FB_BUFF_MODE == 2)
    static lv_disp_buf_t draw_buf_dsc;
    static lv_color_t draw_buf_2_1[LV_HOR_RES_MAX * LV_VER_RES_MAX];       
    static lv_color_t draw_buf_2_2[LV_HOR_RES_MAX * LV_VER_RES_MAX];          
    lv_disp_buf_init(&amp;draw_buf_dsc, draw_buf_2_1, draw_buf_2_2, LV_HOR_RES_MAX * LV_VER_RES_MAX); 
#endif

    // 显示驱动器的描述符
    lv_disp_drv_t disp_drv;      
    // 初始化显示驱动器
    lv_disp_drv_init(&amp;disp_drv); 

    // 设置分辨率
    disp_drv.hor_res = LV_HOR_RES_MAX;
    disp_drv.ver_res = LV_VER_RES_MAX;

    // 将缓冲区的内容复制到显示器
    disp_drv.flush_cb = disp_flush;

    // 设置显示缓冲区
    disp_drv.buffer = &amp;draw_buf_dsc;

    // 最后注册显示驱动
    lv_disp_drv_register(&amp;disp_drv);

}

</code></pre>
<p><font color=#999AAA >函数 disp_init() 修改如下：</p>
<pre><code class="language-c">// 初始化显示器和所需的外设
static void disp_init(void)
{
    // SPI 外设初始化
    lcd_spi_init();
    // 液晶屏初始化
	LCD_Init();
}
</code></pre>
<p><font color=#999AAA >函数 disp_flush() 修改如下：</p>
<pre><code class="language-c">// 将内部缓冲区的内容刷新到显示器的特定区域
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
    // 设置显示区域（开窗口）
    LCD_Address_Set(area-&gt;x1,area-&gt;y1,area-&gt;x2,area-&gt;y2);

    for(y = area-&gt;y1; y &lt;= area-&gt;y2; y++) {
        for(x = area-&gt;x1; x &lt;= area-&gt;x2; x++) {
            // 将所有的像素一一打印在屏幕上
            LCD_WR_DATA(*(uint16_t*)color_p);
            color_p++;
        }
    }

    // 通知图形库，已经准备好进行刷新（固有存在）
    lv_disp_flush_ready(disp_drv);
}
</code></pre>
<h2 id="6输入设备接口">6.输入设备接口</h2>
<font color=#999AAA >
<p>LVGL 输入设备需要选择键盘输入（Keypad），而不是按键输入（Button）。</p>
<p>显示设备接口设置，需要修改 lv_port_indev_template.c，主要包括两个结构体（lv_indev_t、lv_indev_drv_t）和三个接口函数（keypad_init()、keypad_read()、keypad_get_key()）。</p>
</font>
<p><font color=#999AAA >声明设备全局变量：</p>
<pre><code class="language-c">lv_indev_t * indev_keypad;
</code></pre>
<p><font color=#999AAA >函数 lv_port_indev_init() 修改如下：</p>
<pre><code class="language-c">void lv_port_indev_init(void)
{
    // 输入设备的描述符
    lv_indev_drv_t indev_drv;

    // 初始化键盘
    keypad_init();

    // 注册键盘
    lv_indev_drv_init(&amp;indev_drv);
    indev_drv.type = LV_INDEV_TYPE_KEYPAD;
    indev_drv.read_cb = keypad_read;
    indev_keypad = lv_indev_drv_register(&amp;indev_drv);
}
</code></pre>
<p><font color=#999AAA >函数 keypad_init() 修改如下：</p>
<pre><code class="language-c">// 初始化键盘和所需的外设
static void keypad_init(void)
{

}
</code></pre>
<p><font color=#999AAA >函数 lv_port_indev_init() 修改如下：</p>
<pre><code class="language-c">// 在键盘函数中搭配使用（目前无使用）
static void mouse_get_xy(lv_coord_t * x, lv_coord_t * y)
{
    (*x) = 0;
    (*y) = 0;
}
</code></pre>
<p><font color=#999AAA >函数 keypad_read() 修改如下：</p>
<pre><code class="language-c">// 将由库调取，以读取鼠标（需要包含上面的鼠标接口）
static bool keypad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{
    static uint32_t last_key = 0;

    // 获取鼠标坐标
    mouse_get_xy(&amp;data-&gt;point.x, &amp;data-&gt;point.y);

    // 获取键值
    uint32_t act_key = keypad_get_key();
    if(act_key != 0) {
        data-&gt;state = LV_INDEV_STATE_PR;

        last_key = act_key;
    } else {
        data-&gt;state = LV_INDEV_STATE_REL;
    }

    data-&gt;key = last_key;

    // 图形库要求返回 false（固有存在）
    return false;
}
</code></pre>
<p><font color=#999AAA >函数 keypad_get_key() 修改如下：</p>
<pre><code class="language-c">// 获取当前键值，无动作时，返回零值
static uint32_t keypad_get_key(void)
{
    // 自定义键值读取驱动
	uint32_t status;
	uint16_t value_tmp;
	
    // 获取键值，由定时器（或任务）调用按键扫描，实时刷新全局变量 KeyCtrl.EXKeyValue
	value_tmp = KeyCtrl.EXKeyValue;
    // 读取完成后，清除键值
	KeyCtrl.EXKeyValue = 0;

    // 键值与图形库事件进行映射
	switch (value_tmp)
    {
    	case 0x0008:
			status = LV_KEY_PREV;
    		break;

		case 0x0010:
			status = LV_KEY_NEXT;
    		break;
		
		case 0x0004:
			status = LV_KEY_LEFT;
    		break;
		
    	case 0x0020:
			status = LV_KEY_RIGHT;
    		break;
		
		case 0x0002:
			status = LV_KEY_ENTER;
    		break;
		case 0x0001:
			status = LV_KEY_ESC;
    		break;
    	default:
			status = 0;
    		break;
    }

    // 返回键值事件
    return status;
}
</code></pre>
<h2 id="7心跳">7.心跳</h2>
<p><font color=#999AAA >LVGL 需要提供系统时基，用于图形库获取动画事件和任务执行时间。</p>
<p><font color=#999AAA >LVGL 通过定时调用 lv_tick_inc(tick_period) 函数，并以毫秒为单位告知调用周期。</p>
<p><font color=#999AAA >创建时基线程，代码如下：</p>
<pre><code class="language-c">int thread_lv_tick_entry(void)
{
    while(1) 
    {
        usleep(1000);     /* takes microseconds */
        lv_tick_inc(1000); 
    }

    return 0;
}

int main(int argc, char* argv[])
{
    ……
    ret = pthread_create(&amp;id_tick,NULL,(void*)thread_lv_tick_entry,NULL);
    if(ret != 0)
    {
        printf(&quot;Create pthread error\n&quot;);
        exit(1);
    }
    ……
    pthread_join(id_tick,NULL);
    ……
}
</code></pre>
<h2 id="8任务处理">8.任务处理</h2>
<p><font color=#999AAA >LVGL 通过定时调用 lv_task_handler() 函数，以处理图形库系统任务和事件，非严格计时，大约 5 毫秒即可。</p>
<p><font color=#999AAA >创建任务线程，代码如下：</p>
<pre><code class="language-c">int thread_lv_task_entry(void)
{
    while(1)
    {
        usleep(5*1000);
        lv_task_handler();
    }

    return 0;
}
</code></pre>
<h2 id="9控件关联按键">9.控件关联按键</h2>
<p><font color=#999AAA >LVGL 中使用键盘可以完全控制用户界面，需要将键盘控制的对象添加到组（Group）中，同一时间，只有一个焦点对象可以接收动作。</p>
<p>控件关联按键，步骤如下：</p>
<ol>
<li>使用 lv_group_t * group = lv_group_create() 创建组；</li>
<li>使用 lv_group_add_obj(group, obj) 将对象添加到组中；</li>
<li>使用 lv_indev_set_group(indev_keypad, group) 将输入设备分配给组，实现按键导航。</li>
</ol>
</font>
<p><font color=#999AAA >示例：为控件添加按键事件</p>
<pre><code class="language-c">static void user_login_open(void)
{
   // 创建组
   lv_group_t * group = lv_group_create();
   
   // 基于当前屏幕，生成简单对象控件
   lv_obj_t * obj = lv_obj_create(lv_scr_act(), NULL);
   // 设置对象控件的大小
   lv_obj_set_size(obj, 160, 30);
   // 设置对象控件的对齐方式
   lv_obj_align(obj, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
   // 设置对象控件的事件回调
   lv_obj_set_event_cb(obj, user_login_operate_event_cb);

   // 添加对象控件到组中
   lv_group_add_obj(group, obj);
   // 添加组到输入设备导航
   lv_indev_set_group(indev_keypad, group);
}
</code></pre>
<h1 id="总结">总结</h1>
<p><font color=#999AAA >以上的内容，简单介绍了如何移植 LVGL 到嵌入式 Linux 设备，而 LVGL 提供了大量能使我们快速便捷地开发图形界面的函数和方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMake 使用指南（CMake Tutorial）]]></title>
        <id>https://dissor.github.io/cmake-tutorial/</id>
        <link href="https://dissor.github.io/cmake-tutorial/">
        </link>
        <updated>2021-03-02T12:26:07.000Z</updated>
        <content type="html"><![CDATA[<pre><code>cmake_minimum_required(VERSION 3.0.0)
project(tutorial VERSION 0.1.0)

include(CTest)
enable_testing()

add_executable(tutorial main.cpp)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
</code></pre>
<h1 id="1-a-basic-starting-point">1. A Basic Starting Point</h1>
<p>Create a CMakeLists.txt file that looks like(The most basic project):</p>
<pre><code>cmake_minimum_required(VERSION 3.0.0)

# set the project name 
project(tutorial)

# add the executable
add_executable(tutorial main.c)
</code></pre>
<p>Upper, lower, and mixed case commands are supported by CMake.</p>
<h2 id="adding-a-version-number-and-configured-header-file">Adding a Version Number and Configured Header File</h2>
<p>adding a version number:</p>
<pre><code>cmake_minimum_required(VERSION 3.0.0)

# set the project name and version
project(tutorial VERSION 0.1)
</code></pre>
<p>configure a header file:</p>
<pre><code>configure_file(TutorialConfig.h.in TutorialConfig.h)
</code></pre>
<p>search for include files:</p>
<pre><code>target_include_directories(Tutorial PUBLIC
                           &quot;${PROJECT_BINARY_DIR}&quot;
                           )

</code></pre>
<h2 id="specify-the-c-standardm">Specify the C++ Standard(M)</h2>
<pre><code class="language-bash">cmake_minimum_required(VERSION 3.0.0)

# set the project name and version
project(tutorial VERSION 0.1.0)

# specify the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED true)
</code></pre>
<h2 id="build-and-test">Build and Test</h2>
<p>create a build directory:</p>
<pre><code>mkdir __build &amp;&amp; cd __build
cmake .. &amp;&amp; cmake --build .  
</code></pre>
<h1 id="2-adding-a-library">2. Adding a Library</h1>
<p>tree</p>
<pre><code>├── CMakeLists.txt
├── MathFunctions
│   ├── CMakeLists.txt
│   └── mysqrt.c
└── tutorial.c
</code></pre>
<p>create a shared library, like as libxxx.so:</p>
<pre><code># /MathFunctions/CMakeLists.txt
cmake_minimum_required(VERSION 3.0.0)
project(jonas_strlen VERSION 1.0)

add_library(jonas_strlen SHARED mysqrt.c)
</code></pre>
<p>to make use of the new library:</p>
<pre><code># add the MathFunctions library
add_subdirectory(MathFunctions)

# add the executable
add_executable(Tutorial tutorial.cxx)

target_link_libraries(Tutorial PUBLIC MathFunctions)

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
target_include_directories(Tutorial PUBLIC
                          &quot;${PROJECT_BINARY_DIR}&quot;
                          &quot;${PROJECT_SOURCE_DIR}/MathFunctions&quot;
                          )
</code></pre>
<p>add an option:</p>
<pre><code>option(USE_MYMATH &quot;Use tutorial provided math implementation&quot; ON)

# configure a header file to pass some of the CMake settings
# to the source code
configure_file(TutorialConfig.h.in TutorialConfig.h)
</code></pre>
<p>the default value can be changed by the user. this setting will be stored in the cache.</p>
<pre><code>if(USE_MYMATH)
  add_subdirectory(MathFunctions)
  list(APPEND EXTRA_LIBS MathFunctions)
  list(APPEND EXTRA_INCLUDES &quot;${PROJECT_SOURCE_DIR}/MathFunctions&quot;)
endif()

# add the executable
add_executable(Tutorial tutorial.cxx)

target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
target_include_directories(Tutorial PUBLIC
                           &quot;${PROJECT_BINARY_DIR}&quot;
                           ${EXTRA_INCLUDES}
                           )
</code></pre>
<p>change to the source code</p>
<pre><code>#ifdef USE_MYMATH
#  include &quot;MathFunctions.h&quot;
#endif
</code></pre>
<p>for the same file</p>
<pre><code>#ifdef USE_MYMATH
  const double outputValue = mysqrt(inputValue);
#else
  const double outputValue = sqrt(inputValue);
#endif
</code></pre>
<p>change to TutorialConfig.h.in</p>
<pre><code>#cmakedefine USE_MYMATH
</code></pre>
<p>rebuild and run</p>
<pre><code>rm -rf __build
mkdir __build &amp;&amp; cd __build
cmake .. -DUSE_MYMATH=ON &amp;&amp; cmake --build . 
./Tutorial
</code></pre>
<h1 id="3-adding-usage-requirements-for-library">3. Adding Usage Requirements for Library</h1>
<p>add the following line to the end of MathFunctions/CMakeLists.txt:</p>
<pre><code>target_include_directories(MathFunctions
          INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
          )
</code></pre>
<p>remove uses of the EXTRA_INCLUDES variable from the top-level CMakeLists.txt:</p>
<pre><code>if(USE_MYMATH)
  add_subdirectory(MathFunctions)
  list(APPEND EXTRA_LIBS MathFunctions)
endif()
</code></pre>
<p>and here:</p>
<pre><code>target_include_directories(Tutorial PUBLIC
                           &quot;${PROJECT_BINARY_DIR}&quot;
                           )
</code></pre>
<h1 id="4-installing-and-testing">4. Installing and Testing</h1>
<h2 id="install-rules">Install Rules</h2>
<p>add to the end of MathFunctions/CMakeLists.txt:</p>
<pre><code>install(TARGETS MathFunctions DESTINATION lib)
install(FILES MathFunctions.h DESTINATION include)
</code></pre>
<p>and to the end of the top-level CMakeLists.txt we add:</p>
<pre><code>install(TARGETS Tutorial DESTINATION bin)
install(FILES &quot;${PROJECT_BINARY_DIR}/TutorialConfig.h&quot;
  DESTINATION include
  )
</code></pre>
<p>shell</p>
<pre><code>cmake --install . --prefix &quot;/home/myuser/installdir&quot;
</code></pre>
<h2 id="testing-support">Testing Support</h2>
<h1 id="5-adding-system-introspection">5. Adding System Introspection</h1>
<h1 id="6-adding-a-custom-command-and-generated-file">6. Adding a Custom Command and Generated File</h1>
<h1 id="7-building-an-installer">7. Building an Installer</h1>
<h1 id="8-adding-support-for-a-dashboad">8. Adding Support for a Dashboad</h1>
<h1 id="9-mixing-static-and-shared">9. Mixing Static and Shared</h1>
<h1 id="10-adding-generator-expressions">10. Adding Generator Expressions</h1>
<h1 id="11-adding-export-configuration">11. Adding Export Configuration</h1>
<h1 id="12-packaging-debug-and-release">12. Packaging Debug and Release</h1>
<p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">https://cmake.org/cmake/help/latest/guide/tutorial/index.html</a><br>
<a href="https://www.hahack.com/codes/cmake/">https://www.hahack.com/codes/cmake/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[嵌入式 Linux 中使用 GDB 工具（Embedded Linux device using GDB）]]></title>
        <id>https://dissor.github.io/embedded-linux-device-using-gdb/</id>
        <link href="https://dissor.github.io/embedded-linux-device-using-gdb/">
        </link>
        <updated>2021-03-02T01:38:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-getting-the-code">1. Getting the code</h1>
<p>via<a href="http://ftp.gnu.org/gnu/gdb/">FTP</a>, git and <a href="https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git">WWW</a>.</p>
<pre><code class="language-bash">git clone git://sourceware.org/git/binutils-gdb.git
</code></pre>
<h1 id="2-building-gdb-and-gdbserver-for-cross-debugging">2. Building GDB and GDBserver for cross debugging</h1>
<p>GDB runs on host system, the x86_64 GNU/Linux machine, while GDBserver runs on the target, the ARM GNU/Linux board/machine.</p>
<h2 id="21-for-gdb">2.1 For GDB</h2>
<p>GDB runs on x86.</p>
<pre><code class="language-bash">gdb$  ./configure --target=arm-none-linux-gnueabihf
</code></pre>
<h2 id="22-for-gdbserver">2.2 For GDBserver</h2>
<p>GDBserver runs on the ARM machine.</p>
<pre><code class="language-bash">gdb$  ./gdbserver/configure --host=arm-none-linux-gnueabihf
</code></pre>
<h1 id="3-running-via-gdb">3. Running via GDB</h1>
<h2 id="31-arm-machine">3.1 ARM machine</h2>
<pre><code>gdbserver 192.168.43.218:12233 tutorial
</code></pre>
<h2 id="32-host-pc">3.2 Host PC</h2>
<pre><code>arm-none-linux-gnueabihf-gdb -q tutorial
target remote 192.168.43.106:12233
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[周立功 Linux 开发板使用教程（ZLG M6G2C）]]></title>
        <id>https://dissor.github.io/zlg-m6g2c/</id>
        <link href="https://dissor.github.io/zlg-m6g2c/">
        </link>
        <updated>2021-03-01T05:10:38.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://manual.zlg.cn/Public/Uploads/2019-11-01/5dbc0741d7277.jpg" alt="IoT-^G2C-L.png" loading="lazy"></figure>
<h1 id="pin">PIN</h1>
<p>lcd</p>
<table>
<thead>
<tr>
<th>pin</th>
<th>label</th>
<th>default</th>
<th>chip</th>
<th>sort</th>
</tr>
</thead>
<tbody>
<tr>
<td>A1</td>
<td>SCK</td>
<td>SCK</td>
<td>GPIO4_25</td>
<td>121</td>
</tr>
<tr>
<td>A2</td>
<td>SS0</td>
<td>CS</td>
<td>GPIO4_26</td>
<td>122</td>
</tr>
<tr>
<td>A4</td>
<td>MOSI</td>
<td>SDA</td>
<td>GPIO4_27</td>
<td>123</td>
</tr>
<tr>
<td>xB11</td>
<td>P3_4</td>
<td>D/C</td>
<td>GPIO3_4</td>
<td>68</td>
</tr>
<tr>
<td>B12</td>
<td>P5_6</td>
<td>RST</td>
<td>GPIO5_6</td>
<td>134</td>
</tr>
<tr>
<td>xB9</td>
<td>UART8_RX</td>
<td>BL</td>
<td>GPIO3_26</td>
<td>90</td>
</tr>
</tbody>
</table>
<p>led</p>
<table>
<thead>
<tr>
<th>pin</th>
<th>label</th>
<th>default</th>
<th>chip</th>
<th>sort</th>
</tr>
</thead>
<tbody>
<tr>
<td>xB14</td>
<td>UART6_TX</td>
<td>COM</td>
<td>GPIO4_17</td>
<td>113</td>
</tr>
<tr>
<td>xB10</td>
<td>UART8_TX</td>
<td>RUN</td>
<td>GPIO3_25</td>
<td>89</td>
</tr>
<tr>
<td>B13</td>
<td>UART6_RX</td>
<td>NET</td>
<td>GPIO4_18</td>
<td>114</td>
</tr>
<tr>
<td>xB15</td>
<td>I2C_SDA</td>
<td>ALA</td>
<td>GPIO5_8</td>
<td>136</td>
</tr>
</tbody>
</table>
<p>button</p>
<table>
<thead>
<tr>
<th>pin</th>
<th>label</th>
<th>default</th>
<th>chip</th>
<th>sort</th>
</tr>
</thead>
<tbody>
<tr>
<td>A20</td>
<td>UART2_TX</td>
<td>KEY1</td>
<td>GPIO1_20</td>
<td>20</td>
</tr>
<tr>
<td>B23</td>
<td>HPL</td>
<td>KEY2</td>
<td>GPIO3_28</td>
<td>92</td>
</tr>
<tr>
<td>B24</td>
<td>HPR</td>
<td>KEY3</td>
<td>GPIO3_27</td>
<td>91</td>
</tr>
<tr>
<td>xB19</td>
<td>ADC_CH9</td>
<td>KEY4</td>
<td>GPIO1_9</td>
<td>9</td>
</tr>
<tr>
<td>B20</td>
<td>ADC_CH8</td>
<td>KEY5</td>
<td>GPIO1_8</td>
<td>8</td>
</tr>
<tr>
<td>B16</td>
<td>I2C_SCL</td>
<td>KEY6</td>
<td>GPIO5_7</td>
<td>135</td>
</tr>
</tbody>
</table>
<p><a href="https://blog.pentesteracademy.com/booting-an-emulated-arm-device-using-tftp-and-u-boot-6f6868cccd14">1.Booting an Emulated ARM device using TFTP and U-Boot</a></p>
<p><a href="http://wiki.macchiatobin.net/tiki-index.php?page=Use+network+in+U-Boot">2.Use network in U-Boot</a></p>
<p>set proxy</p>
<pre><code class="language-bash">git config --global http.proxy 'socks5h://127.0.0.1:1089'
git config --global --unset http.proxy
</code></pre>
<p>Cn1QX1FbNh4AAAAAAAAAD69fMi7zh4vdPU0nGPLTrVs</p>
<p>https://itsfoss.com/backup-restore-linux-timeshift/</p>
]]></content>
    </entry>
</feed>